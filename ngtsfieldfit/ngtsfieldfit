#!/usr/bin/env python

from astropy.io import fits 
import numpy as np 
import os, sys
import os.path
import time
from tqdm import tqdm 
from multiprocessing import Pool
import multiprocessing
from astropy.table import Table 

OIdata = Table.read('/home/u1870241/bin/OID.dat', format='ascii')



def write_lightcurves(i):
    # Firs tchange the working directory
    os.chdir(home + '/{:}/{:}'.format(prod_id, obj_ids[i]) )

    # Now check if it's there and skip
    if os.path.exists('ngts.lc') : return

    # Get the lightcurve data
    time, mag, mag_err = lightcurves.data[i]

    # Convert time to HJD from 
    time = time/ 86400. + 6658.5

    # Now save lightcurve
    np.savetxt('ngts.lc'.format(prod_id, obj_ids[i]), np.array([time.tolist(), mag.tolist(), mag_err.tolist(), mag.tolist(), mag_err.tolist()]).T )
    
    # Now add to writing lightcurve pool
    
def bin_lightcurves(i):
    # First, cd to the directory
    os.chdir(home + '/{:}/{:}'.format(prod_id, obj_ids[i]) )

    # Now check if it's there and skip
    if (os.path.exists('2_min_lc.dat') and os.path.exists('30_min_lc.dat')) : return  

    # The wait for the file to be made by the "write_lightcurves" processes...
    #while not os.path.exists('ngts.lc'):
    #    time.sleep(1)
    os.system('ngtsbin ngts.lc 2')
    os.system('ngtsbin ngts.lc 30')


def fit_lightcurve(i):
    # Get the object ID
    obj_id = info.data[i]["OBJ_ID"]

    # Change working directory to it
    os.chdir(home + '/{:}/{:}'.format(prod_id, obj_id) )

    # Get transit parameters
    period = info.data[i]["PERIOD"] / 86400.           # Period in days                '
    epoch = info.data[i]["EPOCH"] / 86400. + 6658.5    # epoch in HJD-2450000 / days
    width = info.data[i]["WIDTH"] /  86400.            # Width in days
    depth = info.data[i]["DEPTH"]* -1.                 # depth in mmag
    radius_1 = np.pi*width/period
    k = np.sqrt(depth)
    PEAK =info.data[i]["RANK"]

    # Now check if fit has been done
    if os.path.exists('chain_peak_{:}.dat'.format(PEAK)): return  

    # Now wait for the lightcurve
    #while not os.path.exists('30_min_lc.dat'):
    #    time.sleep(1)

    # Make the fitting call 
    os.system('ngtsfit --filename 30_min_lc.dat --t_zero {:.6f} --period {:.6f} --radius_1 {:.3f} --k {:.3f} --nsteps 10000 --burn_in 5000 --walkers 100 --output chain_peak_{:}.dat'.format(epoch,period, radius_1, k, PEAK))

def corner_lightcurve(i):

    # Change working directory to it
    obj_id = info.data[i]["OBJ_ID"]
    os.chdir(home + '/{:}/{:}'.format(prod_id, obj_id) )

    # Get the peak for renaming 
    PEAK =info.data[i]["RANK"]

    # Check for skip
    if os.path.exists('ngtsfit_{:}.html'.format(PEAK)): return  


    # Now wait for the lightcurve
    #while not os.path.exists('../chain_{:}.dat'.format(PEAK)):
    #    time.sleep(1)

    # Now make and change to tmp directory to avoid thread races
    os.system('mkdir -p peak_{:}'.format(PEAK))
    os.chdir('peak_{:}'.format(PEAK))

    try:
        # Now look up RA and DEC from OBJID 
        idx = np.where(OIdata['col1']==int(obj_id))[0][0] 
        print(idx, OIdata['col2'][idx], OIdata['col3'][idx])
        # Now make the plotting call, pipeing it to ngtslog and background since
        # it wont be as long as the fit (hopefully).
        os.system('ngtscorner ../chain_peak_{:}.dat ../2_min_lc.dat ../30_min_lc.dat {:.6f} {:.6f} > ngtsfit.log'.format(PEAK, OIdata['col2'][idx], OIdata['col3'][idx]))

    #global complete
    #complete += 1
    #print('\r\tComplete {} out of {}'.format(complete, len(info.data["OBJ_ID"]) ), end='')
    # Now rename files based on index
    #os.system('cp ngtsfit_best_model.png ../ngtsfit_best_model_{:}.png'.format(PEAK))
    #os.system('cp ngtsfit_corner_calculated_parameters.png ../ngtsfit_corner_calculated_parameters_{:}.png'.format(PEAK))
    #os.system('cp ngtsfit_corner_fitted_parameters.png ../ngtsfit_corner_fitted_parameters_{:}.png'.format(PEAK))
    #os.system('cp ngtsfit.log ../ngtsfit_{:}.log'.format(PEAK))
    #os.system('cp ngtsfit.html ../ngtsfit_{:}.html'.format(PEAK))
    
    # now change back to home directory and delete the temp directory
    #os.chdir('..')
    #os.system('rm -r tmp_{:}'.format(PEAK))

    # Now remove the chain_{:}.dat to keep filespace at a minimum
    #os.system('rm chain_{:}.dat'.format(PEAK))




complete = 0
if __name__ == '__main__':

    # Load the fits file
    home = '/ngts/scratch/ngtsfit'
    fits_path = '/ngts/scratch/ngtsfit/1807_DC_fits/'
    h = fits.open(fits_path + sys.argv[1])
    prod_id = str(h[0].header['PROD_ID'])
    obj_ids = np.unique(h[4].data["OBJ_ID"])  
    info = h[4]
    
    # Ask What we want to do?
    # 0 screate the file structure
    # 1 Creat the lightcurve files
    # 2 bin the lightcurves
    # 3 Fit the lightcurves using ngtsfit
    # 4 Render the plots
    switch_number = int(sys.argv[2])

    # Number of processes
    NPROC = int(sys.argv[3])

    if switch_number==0:
        # Now define a couple of paths 
        #print('Processing {:} [product ID {:}]'.format(h[0].header['FIELD'] +'_' +  h[0].header['TAG'], prod_id))

        # Now create the product ID folder
        # Run this on single thread since it's quick
        os.chdir(home)
        os.system('mkdir -p {:}'.format(prod_id))

        # Now we need to get a list of independent object IDs
        #print('\tCreating file structure... ', end=''); sys.stdout.flush()
        for i in range(len(obj_ids))[:] : os.system('mkdir -p {:}/{:}'.format(prod_id, obj_ids[i]))
        #print('done.')


    
    # Create  this to allow multiprocessing
    if switch_number==1:
        lightcurves = h[5]
        writing_pool = Pool(NPROC)
        writing_pool.map(write_lightcurves, range(len(obj_ids))[:])
        writing_pool.close()
        writing_pool.join()

    if switch_number==2:
        binning_pool = Pool(NPROC)
        binning_pool.map(bin_lightcurves, range(len(obj_ids))[:])
        binning_pool.close()
        binning_pool.join()


    if switch_number==3:
        fitting_pool = Pool(NPROC)
        fitting_pool.map(fit_lightcurve, range(len(obj_ids))[:])
        fitting_pool.close()
        fitting_pool.join()    
        

    if switch_number==4:
        corner_pool = Pool(NPROC)
        corner_pool.map(corner_lightcurve, range(len(obj_ids))[:1])
        corner_pool.close()
        corner_pool.join()     
    '''
    print('\tCreating lightcurve files... '); sys.stdout.flush()
    corner_pool = Pool(10)
    corner_pool.map_async(corner_lightcurve, range(len(h[4].data["OBJ_ID"]))[:])

    print('\tProgress:')



    fitting_pool.close()
    fitting_pool.join()
    corner_pool.close()
    corner_pool.join()

    os.chdir(home)
    print(' ... done.')

    # Now we need to cycle all the indexes
    for i in range(len(h[4].data))[:]:
        fit_lightcurve(i)
    os.chdir(home)
    print(' ... done.')
    '''
